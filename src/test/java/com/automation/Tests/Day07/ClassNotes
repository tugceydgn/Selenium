March 10, 2020

        Review locators:
                more xpath
                css Selector

##################################################################################


        Locators:
             id
             name
             className
             linkText
             partialLinkText

             cssSelector
             xpath


   In Selenium script, we create a webelement for every HTML element on the page. We use tags and attributes to come up with a locator

   #1 id - if it's consistent, then use it

   <div id="smth"></div>

   #2 name - almost every time unique

   <div name="smth"></div>

   #3 className - almost never unique

   <div class="smth"></div>

   #4 tagName - almost never unique, except <h1>

         <h1>This is a page heading</h1>

   #5 linkText
        <a href="http://google.com">Link text</a>

   #6 partialLinkText
        <a href="http://google.com">Link text</a>

        When you use it, you can mention only part of the link, not complete it exact

   #7 Xpath - xml path
        xml - it's document that looks like HTML, also based on tags.
        There are 2 types of xpath: relative and absolute

        absolute, usually not used in test automation, for finding locators. In rear cases when it's useful:
        When you expect some element in the specific place. You need to start from the root element. In case of
        HTML it's a - <html>

        forward slash - xpath always starts with
        /html/body/div[2]/button/

        you have to go from parent to child
            html
                head
                body
                    div
                    div
                        button
        node - it refers to any HTML element

        Instead, we mostly use relative xpath, and it starts with 2 forward slashes. //
        It can start from any element, not only from root element.

        //tagName[@attribute='value']

        //tagName[@attribute="value"]

        //tagName[text()="text of element"]

   For example:

        <button onclick="button1()">Button 1</button>

        //button[@onclick='button1()']

        //button[text()='Button 1']

        Text is always in between > <

        //button[.='Button 1']

        . - means any element

        //button[contains(text(), '1']

        //button[contains(@onclick, 'button1')]

######### How to go from child to parent element ########################
        /..

        For Example:

        //button[text()='Button 1']/..

        Go to the grand parent:

        //button[text()='Button 1']/../..

Xpath advantages over cssSelector: navigation in both direction:
back and forward, ability to find element by text.

Go to any child:

//div[@id='content']//button

//label[text()='First name']/following-sibling::div/input

/following-sibling::tagName - get the sibling that is located under the element.

<div>
    <input type="text" name="age">
    <label>Enter your age:</label>
</div>

input and label are siblings

for input, label it's a following sibling
for label, input it's a preceding sibling

//input[@name='age']/following-sibling::label

//label[text()='Enter your age:']/preceding-sibling::input
Let's say when input doesn't have id or unique name or something that can help us to find that element,
we can find a label, that is next to it, and jump to that input.

To have both attributes

//button[@type='submit' and @id='wooden_spoon']

To have either one or another attribute

//button[@type='submit' or @id='wooden_spoon']

    #8 CSS Selector

CSS (Cascading Style Sheets) is a language that describes the style of an HTML document. CSS describes how HTML
elements should be displayed. Like the name implies it is a locator strategy by CSS. Native browser support is used by default,
so please refer to w3c css selectors for a list of generally available css selectors. Beware that not all browsers were created equal,
some css that might work in one version may not work in another

Example of to find the cheese below:

<div id="food">
<span class= >milk</span>
<span class= >cheese</span>
</div>

WebElement cheese = driver.findElement(By.cssSelector("#foodspan.dairy.aged"));
OR
WebElement cheese = driver.findElement(By.cssSelector("span [class='dairy aged']"));

in css:
. - class name
# - id

        cssSelector                                     xpath
tagName[attribute='value']                   //tagName[@attribute='value']

### CONTAINS  ( * )
    tagName[attribute*='value']

    tagName[attribute*='value']

### STARTS-WITH ( ^ )

    tagName[attribute^='val']

    button[id^='button_']

### ENDS-WITH ( $ )

    tagName[attribute$='ue']

    button[id$='_button']

#NOTE: Xpath doesn't support ends-with

~ tilde

<button class="btn btn-primary" onclick="button6()" name="button6" id="disappearing_button">Don't click!</button>

#disappearing_button  | find by id

<a class="nav-link" href="/">Home</a>

.nav-link      | find by class name

cssSelector: button[class="btn btn-primary']:nth-of-type(2)
xpath:      //button[@class="btn btn-primary"] [2]

:nth-of-type(n) - where n is an index

in xpath, we can use [index]

:first-child

:last-child

My interview questions, in terms of locators:
        What are the locators?
        Build a locator for table
        Relative vs absolute xpath
        Which locator to use xpath or css and why
        how to handle dynamic element (xpath)
        unbalanced web table, how to handle

######################################################################################

all about css selector: https://www.w3schools.com/cssref/css_selectors.asp

all about xpath: https://www.w3schools.com/xml/xpath_syntax.asp



