package com.automation.Tests.Day02;

public class ClassNotes {
    /*
    * Today is March 1, 2020
    Agenda:
            Selenium basics
            Navigation in selenium
            Weblement
##########################################
Maven lifecycles
Maven automates the build process of Java projects. Each phase in the build process is known as a Maven lifecycle or a Maven goal
Each lifecycle manage a certain part of the build process. Maven lifecycles follow each other.
A Maven lifecycle is a Maven command: mvn verify, mvn test
When certain Maven lifecycle given as a maven command, all life cycles that come before are executed
target folder - auto-generated folder by maven. Contains results of previous build. Build - it's what will be created once you click on the run button.
Right click on the project name --> file --> new --> .gitignore
####we usually don't share these files
.idea
*.iml
target
What do we need to use .gitignore? Do prevent committing of certain files/folder.
Why exactly those 3?
It's not a full list of files/folders. At this point, this is what has to be ignored.
.idea and *.iml auto-generated by Intellij. Once you commit files, and you some other person will pull them, it will cause git conflict.
target - result of previous build, auto-generated by maven. If you commit it, someone else will pull it ---> conflict, because that person has target as well, with different content.
save and close.
In the beginning, I always create .gitignore file before even initializing git repository.
target - never present by default. It appears after executing maven goal/lifecycle
::::STEPS FOR FIRST TIME:::
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/CybertekSchool/Fall2019Selenium.git
git push -u origin master
Then, just 3 steps
git add .
git commit -m "first commit"
git push
git status is not part of the required steps, but it helps to understand what has been changed since last commit.
git git init - not allowed
Selenium WebDriver - is used to develop test automation scripts for web based applications.
web based application - it's a type of application that is used in a browser.
Popular browsers: Chrome, Firefox, Opera, Internet Explorer, Edge, Safari.....
The most popular is a google chrome. In test automation, we usually use google chrome, only. In my last project, I had to test on Internet Explorer, due to government requirements.
Selenium is open source, means free. You don't need to pay for it, but you need to know some java to use (or any other alternative language)
I've see some limitations of selenium in the Internet, but I believe that most of them you can overcome with some other libraries of just java in-built libraries.
The biggest disadvantage of selenium is - synchronization. If selenium  cannot find element, it gives you exception right away. We can handle it, but sometimes it becomes biggest problem.
package name: com.automation.tests.day1
Remember! Chromedriver version has to be the same version as Chrome browser.
By default, WebDrivermanager downloads latest version.
update google chrome browser and update intellij. (if you have some issues)
.close() - close 1 window
.quit() - close all windows
Selenium can jump in between windows. If you have opened more then 1 window during test execution, by calling quit() method you can be sure that anything that was opened by webdriver will be closed.
Wheres close() - can close only one window.
Yo jump in  between windows, you need to write a code. Selenium never switch automatically.
In Selenium, we have something that calls WebElement.
WebElement - represents one particular element from the page. Why do we find them?
To perform some actions, like: click, enter text , read text, etc....
#############################
    Maven - from now one, we gonna use only maven project. Maven used for build automation. It has it's own lyfecycles: compile, test, verify and more...
    Git project: local and remote repository. For every new java project we need to create local git repository: git init.
    Then, we connect local git repository with remote.
    Remote one - located on github.
    Now, you can collaborate with your friends and work on the same project.
    Basic navigation:
        get() - open website
        navigate().to() - same as get
        navigate().back() - jump to previous website
        navigate().forward() - navigate forward in the browser history
        navigate().refresh() - reload the page
        getTitle() - read page title
        getCurrentURL() - get URL of the page that is currently opened
        close() vs quit() - close, used to close only one window, wheres quit() is used to close all windows opened by selenium webdriver.
        windowhandle - it's like window id. Every opened window has window handle. We use them, to jump in between windows. Selenium never jumps automatically.
        WebElement - every object on the page can be represented by webelement. To find any element you need a locator. There are 8 locators, we just used 1: name.
        Syntax to find element:
        WebElement element = driver.findElement(By.name("value"));
        to enter text:
        element.sendKeys()
        To click:
        element.click()
        to press enter button
        element.sendKeys(Keys.ENTER)
*/

}
